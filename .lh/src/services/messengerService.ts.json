{
    "sourceFile": "src/services/messengerService.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1741175896641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1741175896641,
            "name": "Commit-0",
            "content": "import axios from 'axios';\r\nimport { messengerConfig } from '../config/messenger.config';\r\nimport { MessagingEvent, MessengerSession } from '../types/messenger.types';\r\nimport { AppError } from '../types/errors';\r\nimport prisma from '../lib/prisma';\r\n\r\nexport class MessengerService {\r\n    private sessions: Map<string, MessengerSession> = new Map();\r\n\r\n    async sendMessage(userId: string, message: string) {\r\n        try {\r\n            await axios.post(\r\n                `https://graph.facebook.com/${messengerConfig.api_version}/me/messages`,\r\n                {\r\n                    recipient: { id: userId },\r\n                    message: { text: message }\r\n                },\r\n                {\r\n                    params: { access_token: messengerConfig.page_token }\r\n                }\r\n            );\r\n        } catch (error) {\r\n            throw new AppError(500, 'Failed to send message');\r\n        }\r\n    }\r\n\r\n    async handleMessage(event: MessagingEvent) {\r\n        const userId = event.sender.id;\r\n        const session = this.getOrCreateSession(userId);\r\n\r\n        if (event.message?.text) {\r\n            await this.processTextMessage(event.message.text, session);\r\n        } else if (event.message?.attachments) {\r\n            await this.processAttachments(event.message.attachments, session);\r\n        }\r\n    }\r\n\r\n    private getOrCreateSession(userId: string): MessengerSession {\r\n        if (!this.sessions.has(userId)) {\r\n            this.sessions.set(userId, {\r\n                userId,\r\n                context: {},\r\n                lastInteraction: new Date()\r\n            });\r\n        }\r\n        return this.sessions.get(userId)!;\r\n    }\r\n\r\n    private async processTextMessage(text: string, session: MessengerSession) {\r\n        // Implement your chatbot logic here\r\n        const response = await this.generateResponse(text, session.context);\r\n        await this.sendMessage(session.userId, response);\r\n    }\r\n\r\n    private async processAttachments(attachments: any[], session: MessengerSession) {\r\n        // Handle different attachment types\r\n    }\r\n\r\n    private async generateResponse(text: string, context: any): Promise<string> {\r\n        // Implement your response generation logic\r\n        return \"Thanks for your message!\";\r\n    }\r\n}\r\n\r\nexport const messengerService = new MessengerService();"
        }
    ]
}