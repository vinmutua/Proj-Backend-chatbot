{
    "sourceFile": "src/services/userService.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1740608948533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740608961951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,17 @@\n                 isVerified: false\r\n             }\r\n         });\r\n \r\n-        const tokens = generateTokens(user.id);\r\n+        // Fix: Await the token generation\r\n+        const tokens = await generateTokens(user.id);\r\n+        \r\n+        // Store refresh token in database\r\n+        await prisma.user.update({\r\n+            where: { id: user.id },\r\n+            data: { refreshToken: tokens.refreshToken }\r\n+        });\r\n+\r\n         return {\r\n             user: this.sanitizeUser(user),\r\n             tokens\r\n         };\r\n"
                },
                {
                    "date": 1740609147726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,17 @@\n         if (!isValid) {\r\n             throw new Error('Invalid credentials');\r\n         }\r\n \r\n-        const tokens = generateTokens(user.id);\r\n+        // Fix: Await the token generation\r\n+        const tokens = await generateTokens(user.id);\r\n+        \r\n+        // Store refresh token in database\r\n+        await prisma.user.update({\r\n+            where: { id: user.id },\r\n+            data: { refreshToken: tokens.refreshToken }\r\n+        });\r\n+\r\n         return {\r\n             user: this.sanitizeUser(user),\r\n             tokens\r\n         };\r\n@@ -94,9 +102,17 @@\n                 }\r\n             });\r\n         }\r\n \r\n-        const tokens = generateTokens(user.id);\r\n+        // Fix: Await the token generation\r\n+        const tokens = await generateTokens(user.id);\r\n+        \r\n+        // Store refresh token in database\r\n+        await prisma.user.update({\r\n+            where: { id: user.id },\r\n+            data: { refreshToken: tokens.refreshToken }\r\n+        });\r\n+\r\n         return {\r\n             user: this.sanitizeUser(user),\r\n             tokens\r\n         };\r\n"
                },
                {
                    "date": 1741048455254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,26 +39,24 @@\n             tokens\r\n         };\r\n     }\r\n \r\n-    async login(email: string, password: string): Promise<ILoginResponse> {\r\n+    async login(email: string, password: string, remember?: boolean): Promise<ILoginResponse> {\r\n         const user = await prisma.user.findUnique({\r\n             where: { email }\r\n         });\r\n \r\n-        if (!user) {\r\n-            throw new Error('Invalid credentials');\r\n+        if (!user || !await comparePasswords(password, user.password)) {\r\n+            throw new AppError(401, 'Invalid credentials');\r\n         }\r\n \r\n-        const isValid = await comparePasswords(password, user.password);\r\n-        if (!isValid) {\r\n-            throw new Error('Invalid credentials');\r\n+        const tokens = await generateTokens(user.id);\r\n+        \r\n+        // Adjust token expiry based on remember me\r\n+        if (remember) {\r\n+            tokens.refreshToken = await generateTokens(user.id, '30d').refreshToken;\r\n         }\r\n \r\n-        // Fix: Await the token generation\r\n-        const tokens = await generateTokens(user.id);\r\n-        \r\n-        // Store refresh token in database\r\n         await prisma.user.update({\r\n             where: { id: user.id },\r\n             data: { refreshToken: tokens.refreshToken }\r\n         });\r\n@@ -80,34 +78,32 @@\n \r\n         return generateTokens(user.id);\r\n     }\r\n \r\n-    async googleLogin(idToken: string): Promise<ILoginResponse> {\r\n-        const googleUser = await verifyGoogleToken(idToken) as IGoogleUser;\r\n-        if (!googleUser || !googleUser.email) {\r\n-            throw new Error('Invalid Google token');\r\n+    async googleLogin(authData: IGoogleAuthRequest): Promise<ILoginResponse> {\r\n+        const googleUser = await verifyGoogleToken(authData.idToken);\r\n+        if (!googleUser || googleUser.email !== authData.email) {\r\n+            throw new AppError(401, 'Invalid Google token');\r\n         }\r\n \r\n         let user = await prisma.user.findUnique({\r\n-            where: { email: googleUser.email }\r\n+            where: { email: authData.email }\r\n         });\r\n \r\n         if (!user) {\r\n             user = await prisma.user.create({\r\n                 data: {\r\n-                    email: googleUser.email,\r\n-                    firstName: googleUser.name,\r\n-                    googleId: googleUser.sub,\r\n+                    email: authData.email,\r\n+                    firstName: authData.email.split('@')[0],\r\n+                    googleId: authData.googleId,\r\n                     isVerified: true,\r\n-                    password: await hashPassword(Math.random().toString(36))\r\n+                    password: await hashPassword(crypto.randomBytes(32).toString('hex'))\r\n                 }\r\n             });\r\n         }\r\n \r\n-        // Fix: Await the token generation\r\n         const tokens = await generateTokens(user.id);\r\n         \r\n-        // Store refresh token in database\r\n         await prisma.user.update({\r\n             where: { id: user.id },\r\n             data: { refreshToken: tokens.refreshToken }\r\n         });\r\n@@ -163,8 +159,12 @@\n         await prisma.user.update({\r\n             where: { id: user.id },\r\n             data: {\r\n                 password: await hashPassword(newPassword),\r\n+        await prisma.user.update({\r\n+            where: { id: user.id },\r\n+            data: {\r\n+                password: await hashPassword(newPassword),\r\n                 resetPasswordToken: undefined,\r\n                 resetPasswordExpires: undefined\r\n             }\r\n         });\r\n"
                },
                {
                    "date": 1741048461366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,12 +159,8 @@\n         await prisma.user.update({\r\n             where: { id: user.id },\r\n             data: {\r\n                 password: await hashPassword(newPassword),\r\n-        await prisma.user.update({\r\n-            where: { id: user.id },\r\n-            data: {\r\n-                password: await hashPassword(newPassword),\r\n                 resetPasswordToken: undefined,\r\n                 resetPasswordExpires: undefined\r\n             }\r\n         });\r\n"
                },
                {
                    "date": 1741048931050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,10 +40,10 @@\n             user: this.sanitizeUser(user),\r\n             tokens\r\n         };\r\n     }\r\n-        const user = await prisma.user.findUnique({\r\n-            where: { email }\r\n+\r\n+    async login(email: string, password: string, remember?: boolean): Promise<ILoginResponse> {\r\n         });\r\n \r\n         if (!user || !await comparePasswords(password, user.password)) {\r\n             throw new AppError(401, 'Invalid credentials');\r\n"
                },
                {
                    "date": 1741180176507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n             // Find user with valid refresh token\r\n             const user = await prisma.user.findFirst({\r\n                 where: {\r\n                     id: decoded.userId,\r\n-            });\r\n+                    refreshToken: refreshToken\r\n \r\n             if (!user) {\r\n                 throw new AppError(401, 'Invalid refresh token');\r\n             }\r\n"
                }
            ],
            "date": 1740608948533,
            "name": "Commit-0",
            "content": "import { IUser, ILoginResponse, IGoogleUser, IDecodedToken } from '../interfaces/userInterface';\r\nimport { hashPassword, comparePasswords } from '../utils/bcrypt';\r\nimport { generateTokens, verifyJwtToken } from '../utils/jwt';\r\nimport { verifyGoogleToken } from '../utils/oauth';\r\nimport prisma from '../lib/prisma';\r\nimport crypto from 'crypto';\r\nimport { AppError } from '../types/errors';\r\n\r\nexport class UserService {\r\n    async signup(userData: Omit<IUser, 'id' | 'createdAt' | 'updatedAt' | 'isVerified' | 'googleId' | 'verificationToken' | 'resetPasswordToken' | 'resetPasswordExpires' | 'refreshToken'>): Promise<ILoginResponse> {\r\n        const existingUser = await prisma.user.findUnique({\r\n            where: { email: userData.email }\r\n        });\r\n        \r\n        if (existingUser) {\r\n            throw new AppError(400, 'Email already exists');\r\n        }\r\n\r\n        const hashedPassword = await hashPassword(userData.password);\r\n        const user = await prisma.user.create({\r\n            data: {\r\n                ...userData,\r\n                password: hashedPassword,\r\n                isVerified: false\r\n            }\r\n        });\r\n\r\n        const tokens = generateTokens(user.id);\r\n        return {\r\n            user: this.sanitizeUser(user),\r\n            tokens\r\n        };\r\n    }\r\n\r\n    async login(email: string, password: string): Promise<ILoginResponse> {\r\n        const user = await prisma.user.findUnique({\r\n            where: { email }\r\n        });\r\n\r\n        if (!user) {\r\n            throw new Error('Invalid credentials');\r\n        }\r\n\r\n        const isValid = await comparePasswords(password, user.password);\r\n        if (!isValid) {\r\n            throw new Error('Invalid credentials');\r\n        }\r\n\r\n        const tokens = generateTokens(user.id);\r\n        return {\r\n            user: this.sanitizeUser(user),\r\n            tokens\r\n        };\r\n    }\r\n\r\n    async refreshToken(token: string) {\r\n        const decoded = await verifyJwtToken(token) as IDecodedToken;\r\n        const user = await prisma.user.findUnique({\r\n            where: { id: decoded.userId }\r\n        });\r\n        if (!user) {\r\n            throw new Error('User not found');\r\n        }\r\n\r\n        return generateTokens(user.id);\r\n    }\r\n\r\n    async googleLogin(idToken: string): Promise<ILoginResponse> {\r\n        const googleUser = await verifyGoogleToken(idToken) as IGoogleUser;\r\n        if (!googleUser || !googleUser.email) {\r\n            throw new Error('Invalid Google token');\r\n        }\r\n\r\n        let user = await prisma.user.findUnique({\r\n            where: { email: googleUser.email }\r\n        });\r\n\r\n        if (!user) {\r\n            user = await prisma.user.create({\r\n                data: {\r\n                    email: googleUser.email,\r\n                    firstName: googleUser.name,\r\n                    googleId: googleUser.sub,\r\n                    isVerified: true,\r\n                    password: await hashPassword(Math.random().toString(36))\r\n                }\r\n            });\r\n        }\r\n\r\n        const tokens = generateTokens(user.id);\r\n        return {\r\n            user: this.sanitizeUser(user),\r\n            tokens\r\n        };\r\n    }\r\n\r\n    async forgotPassword(email: string): Promise<void> {\r\n        const user = await prisma.user.findUnique({\r\n            where: { email }\r\n        });\r\n        if (!user) {\r\n            throw new AppError(404, 'User not found');\r\n        }\r\n\r\n        const resetToken = crypto.randomBytes(32).toString('hex');\r\n        const hashedToken = crypto\r\n            .createHash('sha256')\r\n            .update(resetToken)\r\n            .digest('hex');\r\n\r\n        await prisma.user.update({\r\n            where: { id: user.id },\r\n            data: {\r\n                resetPasswordToken: hashedToken,\r\n                resetPasswordExpires: new Date(Date.now() + 3600000) // 1 hour\r\n            }\r\n        });\r\n\r\n        // TODO: Send email with reset token\r\n    }\r\n\r\n    async resetPassword(token: string, newPassword: string): Promise<void> {\r\n        const hashedToken = crypto\r\n            .createHash('sha256')\r\n            .update(token)\r\n            .digest('hex');\r\n\r\n        const user = await prisma.user.findFirst({\r\n            where: {\r\n                resetPasswordToken: hashedToken,\r\n                resetPasswordExpires: { gt: new Date() }\r\n            }\r\n        });\r\n\r\n        if (!user) {\r\n            throw new Error('Invalid or expired reset token');\r\n        }\r\n\r\n        await prisma.user.update({\r\n            where: { id: user.id },\r\n            data: {\r\n                password: await hashPassword(newPassword),\r\n                resetPasswordToken: undefined,\r\n                resetPasswordExpires: undefined\r\n            }\r\n        });\r\n    }\r\n\r\n    async verifyEmail(token: string): Promise<void> {\r\n        const user = await prisma.user.findFirst({\r\n            where: { verificationToken: token }\r\n        });\r\n        if (!user) {\r\n            throw new Error('Invalid verification token');\r\n        }\r\n\r\n        await prisma.user.update({\r\n            where: { id: user.id },\r\n            data: {\r\n                isVerified: true,\r\n                verificationToken: undefined\r\n            }\r\n        });\r\n    }\r\n\r\n    async logout(token: string): Promise<void> {\r\n        // TODO: Add token to blacklist or invalidate refresh token\r\n        // This implementation depends on your token management strategy\r\n    }\r\n\r\n    async createUser(userData: Omit<IUser, 'id' | 'createdAt' | 'updatedAt'>): Promise<IUser> {\r\n        return await prisma.user.create({\r\n            data: userData\r\n        })\r\n    }\r\n\r\n    async findUserByEmail(email: string): Promise<IUser | null> {\r\n        return await prisma.user.findUnique({\r\n            where: { email }\r\n        })\r\n    }\r\n\r\n    async findUserById(id: number) {\r\n        return prisma.user.findUnique({\r\n            where: { id }\r\n        });\r\n    }\r\n\r\n    private sanitizeUser(user: IUser): Omit<IUser, 'password'> {\r\n        const { password, ...sanitizedUser } = user;\r\n        return sanitizedUser;\r\n    }\r\n}\r\n\r\nexport const userService = new UserService();\r\nexport default userService;"
        }
    ]
}