{
    "sourceFile": "src/middleware/auth.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1741086585694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741087245705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,25 +9,25 @@\n         }\r\n     }\r\n }\r\n \r\n-export const authMiddleware = async (\r\n-    req: Request,\r\n-    res: Response,\r\n-    next: NextFunction\r\n-): Promise<void> => {\r\n+export const authMiddleware = async (req: Request, res: Response, next: NextFunction) => {\r\n     try {\r\n         const authHeader = req.headers.authorization;\r\n-        if (!authHeader?.startsWith('Bearer ')) {\r\n+        \r\n+        if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n             throw new AppError(401, 'No token provided');\r\n         }\r\n \r\n         const token = authHeader.split(' ')[1];\r\n         const decoded = await verifyJwtToken(token);\r\n+        \r\n+        // Attach user to request\r\n         req.user = { id: decoded.userId };\r\n         next();\r\n-    } catch (error: any) {\r\n-        res.status(401).json({\r\n-            message: 'Unauthorized'\r\n+    } catch (error) {\r\n+        res.status(401).json({ \r\n+            success: false,\r\n+            message: 'Unauthorized access'\r\n         });\r\n     }\r\n };\n\\ No newline at end of file\n"
                }
            ],
            "date": 1741086585693,
            "name": "Commit-0",
            "content": "import { Request, Response, NextFunction } from 'express';\r\nimport { verifyJwtToken } from '../utils/jwt';\r\nimport { AppError } from '../types/errors';\r\n\r\ndeclare global {\r\n    namespace Express {\r\n        interface Request {\r\n            user?: any;  // Consider using a more specific type\r\n        }\r\n    }\r\n}\r\n\r\nexport const authMiddleware = async (\r\n    req: Request,\r\n    res: Response,\r\n    next: NextFunction\r\n): Promise<void> => {\r\n    try {\r\n        const authHeader = req.headers.authorization;\r\n        if (!authHeader?.startsWith('Bearer ')) {\r\n            throw new AppError(401, 'No token provided');\r\n        }\r\n\r\n        const token = authHeader.split(' ')[1];\r\n        const decoded = await verifyJwtToken(token);\r\n        req.user = { id: decoded.userId };\r\n        next();\r\n    } catch (error: any) {\r\n        res.status(401).json({\r\n            message: 'Unauthorized'\r\n        });\r\n    }\r\n};"
        }
    ]
}