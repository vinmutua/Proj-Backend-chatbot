{
    "sourceFile": "src/utils/jwt.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1740608979431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740609231701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,13 +8,13 @@\n \r\n const JWT_SECRET = process.env.JWT_SECRET as Secret;\r\n const REFRESH_SECRET = process.env.REFRESH_SECRET as Secret;\r\n \r\n-// Define default expiry times with proper type casting\r\n-const DEFAULT_ACCESS_EXPIRY = '15m' as const;\r\n-const DEFAULT_REFRESH_EXPIRY = '7d' as const;\r\n+type TokenExpiry = '15m' | '7d';\r\n \r\n if (!JWT_SECRET || !REFRESH_SECRET) {\r\n+\r\n+if (!JWT_SECRET || !REFRESH_SECRET) {\r\n     throw new Error('JWT secrets must be defined in environment variables');\r\n }\r\n \r\n export const generateTokens = async (userId: number) => {\r\n"
                },
                {
                    "date": 1740609237703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,31 +11,34 @@\n \r\n type TokenExpiry = '15m' | '7d';\r\n \r\n if (!JWT_SECRET || !REFRESH_SECRET) {\r\n-\r\n-if (!JWT_SECRET || !REFRESH_SECRET) {\r\n     throw new Error('JWT secrets must be defined in environment variables');\r\n }\r\n \r\n-export const generateTokens = async (userId: number) => {\r\n+export const generateTokens = (userId: number) => {\r\n     try {\r\n+        const accessTokenOptions: SignOptions = {\r\n+            expiresIn: (process.env.ACCESS_TOKEN_EXPIRY || '15m') as TokenExpiry\r\n+        };\r\n+\r\n+        const refreshTokenOptions: SignOptions = {\r\n+            expiresIn: (process.env.REFRESH_TOKEN_EXPIRY || '7d') as TokenExpiry\r\n+        };\r\n+\r\n         const accessToken = jwt.sign(\r\n             { userId },\r\n             JWT_SECRET,\r\n-            { expiresIn: process.env.ACCESS_TOKEN_EXPIRY || '15m' }\r\n+            accessTokenOptions\r\n         );\r\n \r\n         const refreshToken = jwt.sign(\r\n             { userId },\r\n             REFRESH_SECRET,\r\n-            { expiresIn: process.env.REFRESH_TOKEN_EXPIRY || '7d' }\r\n+            refreshTokenOptions\r\n         );\r\n \r\n-        return {\r\n-            accessToken,\r\n-            refreshToken\r\n-        };\r\n+        return { accessToken, refreshToken };\r\n     } catch (error) {\r\n         throw new AppError(500, 'Error generating tokens');\r\n     }\r\n };\r\n"
                }
            ],
            "date": 1740608979431,
            "name": "Commit-0",
            "content": "import jwt, { SignOptions, Secret, JwtPayload } from 'jsonwebtoken';\r\nimport { IDecodedToken } from '../interfaces/userInterface';\r\nimport { AppError } from '../types/errors';\r\nimport dotenv from 'dotenv';\r\n\r\n// Load environment variables\r\ndotenv.config();\r\n\r\nconst JWT_SECRET = process.env.JWT_SECRET as Secret;\r\nconst REFRESH_SECRET = process.env.REFRESH_SECRET as Secret;\r\n\r\n// Define default expiry times with proper type casting\r\nconst DEFAULT_ACCESS_EXPIRY = '15m' as const;\r\nconst DEFAULT_REFRESH_EXPIRY = '7d' as const;\r\n\r\nif (!JWT_SECRET || !REFRESH_SECRET) {\r\n    throw new Error('JWT secrets must be defined in environment variables');\r\n}\r\n\r\nexport const generateTokens = async (userId: number) => {\r\n    try {\r\n        const accessToken = jwt.sign(\r\n            { userId },\r\n            JWT_SECRET,\r\n            { expiresIn: process.env.ACCESS_TOKEN_EXPIRY || '15m' }\r\n        );\r\n\r\n        const refreshToken = jwt.sign(\r\n            { userId },\r\n            REFRESH_SECRET,\r\n            { expiresIn: process.env.REFRESH_TOKEN_EXPIRY || '7d' }\r\n        );\r\n\r\n        return {\r\n            accessToken,\r\n            refreshToken\r\n        };\r\n    } catch (error) {\r\n        throw new AppError(500, 'Error generating tokens');\r\n    }\r\n};\r\n\r\n// Add both named exports for backward compatibility\r\nexport const verifyJwtToken = async (token: string): Promise<IDecodedToken> => {\r\n    try {\r\n        const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;\r\n        if (!decoded || typeof decoded.userId !== 'number') {\r\n            throw new AppError(401, 'Invalid token payload');\r\n        }\r\n        return decoded as IDecodedToken;\r\n    } catch (error) {\r\n        throw new AppError(401, 'Invalid or expired token');\r\n    }\r\n};\r\n\r\n// Add alias for verifyToken\r\nexport const verifyToken = verifyJwtToken;"
        }
    ]
}