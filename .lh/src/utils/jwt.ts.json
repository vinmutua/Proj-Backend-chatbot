{
    "sourceFile": "src/utils/jwt.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1740608979431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740609231701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,13 +8,13 @@\n \r\n const JWT_SECRET = process.env.JWT_SECRET as Secret;\r\n const REFRESH_SECRET = process.env.REFRESH_SECRET as Secret;\r\n \r\n-// Define default expiry times with proper type casting\r\n-const DEFAULT_ACCESS_EXPIRY = '15m' as const;\r\n-const DEFAULT_REFRESH_EXPIRY = '7d' as const;\r\n+type TokenExpiry = '15m' | '7d';\r\n \r\n if (!JWT_SECRET || !REFRESH_SECRET) {\r\n+\r\n+if (!JWT_SECRET || !REFRESH_SECRET) {\r\n     throw new Error('JWT secrets must be defined in environment variables');\r\n }\r\n \r\n export const generateTokens = async (userId: number) => {\r\n"
                },
                {
                    "date": 1740609237703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,31 +11,34 @@\n \r\n type TokenExpiry = '15m' | '7d';\r\n \r\n if (!JWT_SECRET || !REFRESH_SECRET) {\r\n-\r\n-if (!JWT_SECRET || !REFRESH_SECRET) {\r\n     throw new Error('JWT secrets must be defined in environment variables');\r\n }\r\n \r\n-export const generateTokens = async (userId: number) => {\r\n+export const generateTokens = (userId: number) => {\r\n     try {\r\n+        const accessTokenOptions: SignOptions = {\r\n+            expiresIn: (process.env.ACCESS_TOKEN_EXPIRY || '15m') as TokenExpiry\r\n+        };\r\n+\r\n+        const refreshTokenOptions: SignOptions = {\r\n+            expiresIn: (process.env.REFRESH_TOKEN_EXPIRY || '7d') as TokenExpiry\r\n+        };\r\n+\r\n         const accessToken = jwt.sign(\r\n             { userId },\r\n             JWT_SECRET,\r\n-            { expiresIn: process.env.ACCESS_TOKEN_EXPIRY || '15m' }\r\n+            accessTokenOptions\r\n         );\r\n \r\n         const refreshToken = jwt.sign(\r\n             { userId },\r\n             REFRESH_SECRET,\r\n-            { expiresIn: process.env.REFRESH_TOKEN_EXPIRY || '7d' }\r\n+            refreshTokenOptions\r\n         );\r\n \r\n-        return {\r\n-            accessToken,\r\n-            refreshToken\r\n-        };\r\n+        return { accessToken, refreshToken };\r\n     } catch (error) {\r\n         throw new AppError(500, 'Error generating tokens');\r\n     }\r\n };\r\n"
                },
                {
                    "date": 1741051301681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,30 +14,21 @@\n if (!JWT_SECRET || !REFRESH_SECRET) {\r\n     throw new Error('JWT secrets must be defined in environment variables');\r\n }\r\n \r\n-export const generateTokens = (userId: number) => {\r\n+export const generateTokens = (userId: number, expiry?: string) => {\r\n     try {\r\n         const accessTokenOptions: SignOptions = {\r\n-            expiresIn: (process.env.ACCESS_TOKEN_EXPIRY || '15m') as TokenExpiry\r\n+            expiresIn: (process.env.ACCESS_TOKEN_EXPIRY || '15m')\r\n         };\r\n \r\n         const refreshTokenOptions: SignOptions = {\r\n-            expiresIn: (process.env.REFRESH_TOKEN_EXPIRY || '7d') as TokenExpiry\r\n+            expiresIn: expiry || (process.env.REFRESH_TOKEN_EXPIRY || '7d')\r\n         };\r\n \r\n-        const accessToken = jwt.sign(\r\n-            { userId },\r\n-            JWT_SECRET,\r\n-            accessTokenOptions\r\n-        );\r\n+        const accessToken = jwt.sign({ userId }, JWT_SECRET, accessTokenOptions);\r\n+        const refreshToken = jwt.sign({ userId }, REFRESH_SECRET, refreshTokenOptions);\r\n \r\n-        const refreshToken = jwt.sign(\r\n-            { userId },\r\n-            REFRESH_SECRET,\r\n-            refreshTokenOptions\r\n-        );\r\n-\r\n         return { accessToken, refreshToken };\r\n     } catch (error) {\r\n         throw new AppError(500, 'Error generating tokens');\r\n     }\r\n"
                },
                {
                    "date": 1741051391600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,22 +8,23 @@\n \r\n const JWT_SECRET = process.env.JWT_SECRET as Secret;\r\n const REFRESH_SECRET = process.env.REFRESH_SECRET as Secret;\r\n \r\n-type TokenExpiry = '15m' | '7d';\r\n+// Define valid token expiry values\r\n+type TokenExpiry = '15m' | '7d' | number;\r\n \r\n if (!JWT_SECRET || !REFRESH_SECRET) {\r\n     throw new Error('JWT secrets must be defined in environment variables');\r\n }\r\n \r\n-export const generateTokens = (userId: number, expiry?: string) => {\r\n+export const generateTokens = (userId: number, expiry?: TokenExpiry) => {\r\n     try {\r\n         const accessTokenOptions: SignOptions = {\r\n-            expiresIn: (process.env.ACCESS_TOKEN_EXPIRY || '15m')\r\n+            expiresIn: process.env.ACCESS_TOKEN_EXPIRY || '15m' as TokenExpiry\r\n         };\r\n \r\n         const refreshTokenOptions: SignOptions = {\r\n-            expiresIn: expiry || (process.env.REFRESH_TOKEN_EXPIRY || '7d')\r\n+            expiresIn: expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d' as TokenExpiry\r\n         };\r\n \r\n         const accessToken = jwt.sign({ userId }, JWT_SECRET, accessTokenOptions);\r\n         const refreshToken = jwt.sign({ userId }, REFRESH_SECRET, refreshTokenOptions);\r\n"
                },
                {
                    "date": 1741051504671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,10 @@\n \r\n const JWT_SECRET = process.env.JWT_SECRET as Secret;\r\n const REFRESH_SECRET = process.env.REFRESH_SECRET as Secret;\r\n \r\n-// Define valid token expiry values\r\n-type TokenExpiry = '15m' | '7d' | number;\r\n+// Update TokenExpiry type to match jwt library's StringValue type\r\n+type TokenExpiry = string | number;\r\n \r\n if (!JWT_SECRET || !REFRESH_SECRET) {\r\n     throw new Error('JWT secrets must be defined in environment variables');\r\n }\r\n"
                },
                {
                    "date": 1741051511616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,13 +18,13 @@\n \r\n export const generateTokens = (userId: number, expiry?: TokenExpiry) => {\r\n     try {\r\n         const accessTokenOptions: SignOptions = {\r\n-            expiresIn: process.env.ACCESS_TOKEN_EXPIRY || '15m' as TokenExpiry\r\n+            expiresIn: (process.env.ACCESS_TOKEN_EXPIRY || '15m') as string\r\n         };\r\n \r\n         const refreshTokenOptions: SignOptions = {\r\n-            expiresIn: expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d' as TokenExpiry\r\n+            expiresIn: (expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d') as string\r\n         };\r\n \r\n         const accessToken = jwt.sign({ userId }, JWT_SECRET, accessTokenOptions);\r\n         const refreshToken = jwt.sign({ userId }, REFRESH_SECRET, refreshTokenOptions);\r\n"
                },
                {
                    "date": 1741052558653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \r\n export const generateTokens = (userId: number, expiry?: TokenExpiry) => {\r\n     try {\r\n         const accessTokenOptions: SignOptions = {\r\n-            expiresIn: (process.env.ACCESS_TOKEN_EXPIRY || '15m') as string\r\n+            expiresIn: process.env.ACCESS_TOKEN_EXPIRY || '15m'\r\n         };\r\n \r\n         const refreshTokenOptions: SignOptions = {\r\n             expiresIn: (expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d') as string\r\n"
                },
                {
                    "date": 1741052563923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n             expiresIn: process.env.ACCESS_TOKEN_EXPIRY || '15m'\r\n         };\r\n \r\n         const refreshTokenOptions: SignOptions = {\r\n-            expiresIn: (expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d') as string\r\n+            expiresIn: expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d'\r\n         };\r\n \r\n         const accessToken = jwt.sign({ userId }, JWT_SECRET, accessTokenOptions);\r\n         const refreshToken = jwt.sign({ userId }, REFRESH_SECRET, refreshTokenOptions);\r\n"
                },
                {
                    "date": 1741053584932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,10 @@\n \r\n const JWT_SECRET = process.env.JWT_SECRET as Secret;\r\n const REFRESH_SECRET = process.env.REFRESH_SECRET as Secret;\r\n \r\n-// Update TokenExpiry type to match jwt library's StringValue type\r\n-type TokenExpiry = string | number;\r\n+// Define StringValue type from jsonwebtoken\r\n+type StringOrNumber = string | number;\r\n \r\n if (!JWT_SECRET || !REFRESH_SECRET) {\r\n     throw new Error('JWT secrets must be defined in environment variables');\r\n }\r\n"
                },
                {
                    "date": 1741053592349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,16 +15,16 @@\n if (!JWT_SECRET || !REFRESH_SECRET) {\r\n     throw new Error('JWT secrets must be defined in environment variables');\r\n }\r\n \r\n-export const generateTokens = (userId: number, expiry?: TokenExpiry) => {\r\n+export const generateTokens = (userId: number, expiry?: StringOrNumber) => {\r\n     try {\r\n         const accessTokenOptions: SignOptions = {\r\n-            expiresIn: process.env.ACCESS_TOKEN_EXPIRY || '15m'\r\n+            expiresIn: process.env.ACCESS_TOKEN_EXPIRY as string || '15m'\r\n         };\r\n \r\n         const refreshTokenOptions: SignOptions = {\r\n-            expiresIn: expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d'\r\n+            expiresIn: (expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d') as string\r\n         };\r\n \r\n         const accessToken = jwt.sign({ userId }, JWT_SECRET, accessTokenOptions);\r\n         const refreshToken = jwt.sign({ userId }, REFRESH_SECRET, refreshTokenOptions);\r\n"
                },
                {
                    "date": 1741053659260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n             expiresIn: process.env.ACCESS_TOKEN_EXPIRY as string || '15m'\r\n         };\r\n \r\n         const refreshTokenOptions: SignOptions = {\r\n-            expiresIn: (expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d') as string\r\n+            expiresIn: expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d'\r\n         };\r\n \r\n         const accessToken = jwt.sign({ userId }, JWT_SECRET, accessTokenOptions);\r\n         const refreshToken = jwt.sign({ userId }, REFRESH_SECRET, refreshTokenOptions);\r\n"
                },
                {
                    "date": 1741053734951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,23 +8,23 @@\n \r\n const JWT_SECRET = process.env.JWT_SECRET as Secret;\r\n const REFRESH_SECRET = process.env.REFRESH_SECRET as Secret;\r\n \r\n-// Define StringValue type from jsonwebtoken\r\n-type StringOrNumber = string | number;\r\n+// Import StringValue type from jsonwebtoken\r\n+type StringValue = string | { toString(): string };\r\n \r\n if (!JWT_SECRET || !REFRESH_SECRET) {\r\n     throw new Error('JWT secrets must be defined in environment variables');\r\n }\r\n \r\n-export const generateTokens = (userId: number, expiry?: StringOrNumber) => {\r\n+export const generateTokens = (userId: number, expiry?: string | number) => {\r\n     try {\r\n         const accessTokenOptions: SignOptions = {\r\n-            expiresIn: process.env.ACCESS_TOKEN_EXPIRY as string || '15m'\r\n+            expiresIn: (process.env.ACCESS_TOKEN_EXPIRY || '15m') as StringValue\r\n         };\r\n \r\n         const refreshTokenOptions: SignOptions = {\r\n-            expiresIn: expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d'\r\n+            expiresIn: (expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d') as StringValue\r\n         };\r\n \r\n         const accessToken = jwt.sign({ userId }, JWT_SECRET, accessTokenOptions);\r\n         const refreshToken = jwt.sign({ userId }, REFRESH_SECRET, refreshTokenOptions);\r\n"
                },
                {
                    "date": 1741054025386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,23 +8,20 @@\n \r\n const JWT_SECRET = process.env.JWT_SECRET as Secret;\r\n const REFRESH_SECRET = process.env.REFRESH_SECRET as Secret;\r\n \r\n-// Import StringValue type from jsonwebtoken\r\n-type StringValue = string | { toString(): string };\r\n-\r\n if (!JWT_SECRET || !REFRESH_SECRET) {\r\n     throw new Error('JWT secrets must be defined in environment variables');\r\n }\r\n \r\n export const generateTokens = (userId: number, expiry?: string | number) => {\r\n     try {\r\n         const accessTokenOptions: SignOptions = {\r\n-            expiresIn: (process.env.ACCESS_TOKEN_EXPIRY || '15m') as StringValue\r\n+            expiresIn: process.env.ACCESS_TOKEN_EXPIRY || '15m' // Use string directly\r\n         };\r\n \r\n         const refreshTokenOptions: SignOptions = {\r\n-            expiresIn: (expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d') as StringValue\r\n+            expiresIn: expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d' // Use string or number directly\r\n         };\r\n \r\n         const accessToken = jwt.sign({ userId }, JWT_SECRET, accessTokenOptions);\r\n         const refreshToken = jwt.sign({ userId }, REFRESH_SECRET, refreshTokenOptions);\r\n"
                },
                {
                    "date": 1741054057265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,20 +8,23 @@\n \r\n const JWT_SECRET = process.env.JWT_SECRET as Secret;\r\n const REFRESH_SECRET = process.env.REFRESH_SECRET as Secret;\r\n \r\n+// Import StringValue type from jsonwebtoken\r\n+type StringValue = string | { toString(): string };\r\n+\r\n if (!JWT_SECRET || !REFRESH_SECRET) {\r\n     throw new Error('JWT secrets must be defined in environment variables');\r\n }\r\n \r\n export const generateTokens = (userId: number, expiry?: string | number) => {\r\n     try {\r\n         const accessTokenOptions: SignOptions = {\r\n-            expiresIn: process.env.ACCESS_TOKEN_EXPIRY || '15m' // Use string directly\r\n+            expiresIn: (process.env.ACCESS_TOKEN_EXPIRY || '15m') as StringValue\r\n         };\r\n \r\n         const refreshTokenOptions: SignOptions = {\r\n-            expiresIn: expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d' // Use string or number directly\r\n+            expiresIn: (expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d') as StringValue\r\n         };\r\n \r\n         const accessToken = jwt.sign({ userId }, JWT_SECRET, accessTokenOptions);\r\n         const refreshToken = jwt.sign({ userId }, REFRESH_SECRET, refreshTokenOptions);\r\n"
                },
                {
                    "date": 1741054129207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,23 +8,26 @@\n \r\n const JWT_SECRET = process.env.JWT_SECRET as Secret;\r\n const REFRESH_SECRET = process.env.REFRESH_SECRET as Secret;\r\n \r\n-// Import StringValue type from jsonwebtoken\r\n-type StringValue = string | { toString(): string };\r\n+// Type for token expiry\r\n+type ExpiryType = string | number;\r\n \r\n if (!JWT_SECRET || !REFRESH_SECRET) {\r\n     throw new Error('JWT secrets must be defined in environment variables');\r\n }\r\n \r\n-export const generateTokens = (userId: number, expiry?: string | number) => {\r\n+export const generateTokens = (userId: number, expiry?: ExpiryType) => {\r\n     try {\r\n+        const accessTokenExpiry: ExpiryType = process.env.ACCESS_TOKEN_EXPIRY || '15m';\r\n+        const refreshTokenExpiry: ExpiryType = expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d';\r\n+\r\n         const accessTokenOptions: SignOptions = {\r\n-            expiresIn: (process.env.ACCESS_TOKEN_EXPIRY || '15m') as StringValue\r\n+            expiresIn: accessTokenExpiry\r\n         };\r\n \r\n         const refreshTokenOptions: SignOptions = {\r\n-            expiresIn: (expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d') as StringValue\r\n+            expiresIn: refreshTokenExpiry\r\n         };\r\n \r\n         const accessToken = jwt.sign({ userId }, JWT_SECRET, accessTokenOptions);\r\n         const refreshToken = jwt.sign({ userId }, REFRESH_SECRET, refreshTokenOptions);\r\n"
                },
                {
                    "date": 1741054320788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,10 @@\n }\r\n \r\n export const generateTokens = (userId: number, expiry?: ExpiryType) => {\r\n     try {\r\n+        // Default values if env vars are not set\r\n         const accessTokenExpiry: ExpiryType = process.env.ACCESS_TOKEN_EXPIRY || '15m';\r\n-        const refreshTokenExpiry: ExpiryType = expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d';\r\n \r\n         const accessTokenOptions: SignOptions = {\r\n             expiresIn: accessTokenExpiry\r\n         };\r\n"
                },
                {
                    "date": 1741054328207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,20 +19,22 @@\n export const generateTokens = (userId: number, expiry?: ExpiryType) => {\r\n     try {\r\n         // Default values if env vars are not set\r\n         const accessTokenExpiry: ExpiryType = process.env.ACCESS_TOKEN_EXPIRY || '15m';\r\n+        const refreshTokenExpiry: ExpiryType = expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d';\r\n \r\n-        const accessTokenOptions: SignOptions = {\r\n-            expiresIn: accessTokenExpiry\r\n-        };\r\n+        const accessToken = jwt.sign(\r\n+            { userId }, \r\n+            JWT_SECRET, \r\n+            { expiresIn: accessTokenExpiry }\r\n+        );\r\n \r\n-        const refreshTokenOptions: SignOptions = {\r\n-            expiresIn: refreshTokenExpiry\r\n-        };\r\n+        const refreshToken = jwt.sign(\r\n+            { userId }, \r\n+            REFRESH_SECRET, \r\n+            { expiresIn: refreshTokenExpiry }\r\n+        );\r\n \r\n-        const accessToken = jwt.sign({ userId }, JWT_SECRET, accessTokenOptions);\r\n-        const refreshToken = jwt.sign({ userId }, REFRESH_SECRET, refreshTokenOptions);\r\n-\r\n         return { accessToken, refreshToken };\r\n     } catch (error) {\r\n         throw new AppError(500, 'Error generating tokens');\r\n     }\r\n"
                },
                {
                    "date": 1741054445583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,31 +8,39 @@\n \r\n const JWT_SECRET = process.env.JWT_SECRET as Secret;\r\n const REFRESH_SECRET = process.env.REFRESH_SECRET as Secret;\r\n \r\n-// Type for token expiry\r\n-type ExpiryType = string | number;\r\n+// Define valid expiry types that match jsonwebtoken's requirements\r\n+type StringValue = string & {};\r\n+type ExpiryType = number | StringValue;\r\n \r\n if (!JWT_SECRET || !REFRESH_SECRET) {\r\n     throw new Error('JWT secrets must be defined in environment variables');\r\n }\r\n \r\n export const generateTokens = (userId: number, expiry?: ExpiryType) => {\r\n     try {\r\n-        // Default values if env vars are not set\r\n-        const accessTokenExpiry: ExpiryType = process.env.ACCESS_TOKEN_EXPIRY || '15m';\r\n-        const refreshTokenExpiry: ExpiryType = expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d';\r\n+        const accessTokenExpiry = process.env.ACCESS_TOKEN_EXPIRY || '15m';\r\n+        const refreshTokenExpiry = expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d';\r\n \r\n+        const accessTokenOptions: SignOptions = {\r\n+            expiresIn: accessTokenExpiry as ExpiryType\r\n+        };\r\n+\r\n+        const refreshTokenOptions: SignOptions = {\r\n+            expiresIn: refreshTokenExpiry as ExpiryType\r\n+        };\r\n+\r\n         const accessToken = jwt.sign(\r\n             { userId }, \r\n             JWT_SECRET, \r\n-            { expiresIn: accessTokenExpiry }\r\n+            accessTokenOptions\r\n         );\r\n \r\n         const refreshToken = jwt.sign(\r\n             { userId }, \r\n             REFRESH_SECRET, \r\n-            { expiresIn: refreshTokenExpiry }\r\n+            refreshTokenOptions\r\n         );\r\n \r\n         return { accessToken, refreshToken };\r\n     } catch (error) {\r\n@@ -44,14 +52,6 @@\n export const verifyJwtToken = async (token: string): Promise<IDecodedToken> => {\r\n     try {\r\n         const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;\r\n         if (!decoded || typeof decoded.userId !== 'number') {\r\n-            throw new AppError(401, 'Invalid token payload');\r\n-        }\r\n-        return decoded as IDecodedToken;\r\n-    } catch (error) {\r\n-        throw new AppError(401, 'Invalid or expired token');\r\n-    }\r\n-};\r\n-\r\n // Add alias for verifyToken\r\n export const verifyToken = verifyJwtToken;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741054451304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,6 +52,14 @@\n export const verifyJwtToken = async (token: string): Promise<IDecodedToken> => {\r\n     try {\r\n         const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;\r\n         if (!decoded || typeof decoded.userId !== 'number') {\r\n+            throw new AppError(401, 'Invalid token payload');\r\n+        }\r\n+        return decoded as IDecodedToken;\r\n+    } catch (error) {\r\n+        throw new AppError(401, 'Invalid or expired token');\r\n+    }\r\n+};\r\n+\r\n // Add alias for verifyToken\r\n export const verifyToken = verifyJwtToken;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741054542041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,15 +32,15 @@\n         const refreshToken = jwt.sign({ userId }, REFRESH_SECRET, refreshTokenOptions);\r\n \r\n         return { accessToken, refreshToken };\r\n     } catch (error) {\r\n-            accessTokenOptions\r\n-        );\r\n+        throw new AppError(500, 'Error generating tokens');\r\n+    }\r\n+};\r\n \r\n-        const refreshToken = jwt.sign(\r\n-            { userId }, \r\n-            REFRESH_SECRET, \r\n-            refreshTokenOptions\r\n+// Add both named exports for backward compatibility\r\n+export const verifyJwtToken = async (token: string): Promise<IDecodedToken> => {\r\n+    try {\r\n         );\r\n \r\n         return { accessToken, refreshToken };\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1741054652790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,10 @@\n  */\r\n export const generateTokens = (userId: number, expiry?: string | number) => {\r\n     try {\r\n         // Define options with correct types\r\n-\r\n-        const refreshTokenOptions: SignOptions = {\r\n+        const accessTokenOptions: SignOptions = {\r\n+            expiresIn: process.env.ACCESS_TOKEN_EXPIRY || '15m'\r\n             expiresIn: expiry || process.env.REFRESH_TOKEN_EXPIRY || '7d'\r\n         };\r\n \r\n         const accessToken = jwt.sign({ userId }, JWT_SECRET, accessTokenOptions);\r\n"
                }
            ],
            "date": 1740608979431,
            "name": "Commit-0",
            "content": "import jwt, { SignOptions, Secret, JwtPayload } from 'jsonwebtoken';\r\nimport { IDecodedToken } from '../interfaces/userInterface';\r\nimport { AppError } from '../types/errors';\r\nimport dotenv from 'dotenv';\r\n\r\n// Load environment variables\r\ndotenv.config();\r\n\r\nconst JWT_SECRET = process.env.JWT_SECRET as Secret;\r\nconst REFRESH_SECRET = process.env.REFRESH_SECRET as Secret;\r\n\r\n// Define default expiry times with proper type casting\r\nconst DEFAULT_ACCESS_EXPIRY = '15m' as const;\r\nconst DEFAULT_REFRESH_EXPIRY = '7d' as const;\r\n\r\nif (!JWT_SECRET || !REFRESH_SECRET) {\r\n    throw new Error('JWT secrets must be defined in environment variables');\r\n}\r\n\r\nexport const generateTokens = async (userId: number) => {\r\n    try {\r\n        const accessToken = jwt.sign(\r\n            { userId },\r\n            JWT_SECRET,\r\n            { expiresIn: process.env.ACCESS_TOKEN_EXPIRY || '15m' }\r\n        );\r\n\r\n        const refreshToken = jwt.sign(\r\n            { userId },\r\n            REFRESH_SECRET,\r\n            { expiresIn: process.env.REFRESH_TOKEN_EXPIRY || '7d' }\r\n        );\r\n\r\n        return {\r\n            accessToken,\r\n            refreshToken\r\n        };\r\n    } catch (error) {\r\n        throw new AppError(500, 'Error generating tokens');\r\n    }\r\n};\r\n\r\n// Add both named exports for backward compatibility\r\nexport const verifyJwtToken = async (token: string): Promise<IDecodedToken> => {\r\n    try {\r\n        const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;\r\n        if (!decoded || typeof decoded.userId !== 'number') {\r\n            throw new AppError(401, 'Invalid token payload');\r\n        }\r\n        return decoded as IDecodedToken;\r\n    } catch (error) {\r\n        throw new AppError(401, 'Invalid or expired token');\r\n    }\r\n};\r\n\r\n// Add alias for verifyToken\r\nexport const verifyToken = verifyJwtToken;"
        }
    ]
}