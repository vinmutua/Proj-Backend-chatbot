{
    "sourceFile": "src/controllers/userController.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1741048387084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741048396749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,17 @@\n             \r\n             res.status(201).json(result);\r\n         } catch (error) {\r\n             if (error instanceof AppError) {\r\n+                res.status(error.statusCode).json({ message: error.message });\r\n+            } else {\r\n+                res.status(400).json({ message: 'Error during signup' });\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public async login(req: Request<{}, {}, ILoginRequest>, res: Response): Promise<void> {\r\n+        try {\r\n             const { email, password } = req.body;\r\n             const result = await userService.login(email, password);\r\n             res.status(200).json(result);\r\n         } catch (error) {\r\n@@ -108,17 +117,23 @@\n             });\r\n         }\r\n     }\r\n \r\n-    public async googleLogin(req: Request, res: Response): Promise<void> {\r\n+    public async googleLogin(req: Request<{}, {}, IGoogleAuthRequest>, res: Response): Promise<void> {\r\n         try {\r\n-            const { idToken } = req.body;\r\n-            const result = await userService.googleLogin(idToken);\r\n+            const { idToken, googleId, email } = req.body;\r\n+            const result = await userService.googleLogin({\r\n+                idToken,\r\n+                googleId,\r\n+                email\r\n+            });\r\n             res.status(200).json(result);\r\n-        } catch (error: any) {\r\n-            res.status(401).json({ \r\n-                message: error.message || 'Google authentication failed'\r\n-            });\r\n+        } catch (error) {\r\n+            if (error instanceof AppError) {\r\n+                res.status(error.statusCode).json({ message: error.message });\r\n+            } else {\r\n+                res.status(401).json({ message: 'Google authentication failed' });\r\n+            }\r\n         }\r\n     }\r\n \r\n     public async getUserById(req: Request<IUserParams>, res: Response): Promise<void> {\r\n"
                },
                {
                    "date": 1741049125806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,9 @@\n             }\r\n             \r\n             const result = await userService.signup({\r\n                 email,\r\n-                password,\r\n-                firstName: email.split('@')[0] // Default firstName from email\r\n+                password\r\n             });\r\n             \r\n             res.status(201).json(result);\r\n         } catch (error) {\r\n"
                },
                {
                    "date": 1741049671245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,18 +5,10 @@\n \r\n class UserController {\r\n     public async signup(req: Request<{}, {}, ISignupRequest>, res: Response): Promise<void> {\r\n         try {\r\n-            const { email, password, terms } = req.body;\r\n-            if (!terms) {\r\n-                throw new AppError(400, 'Terms must be accepted');\r\n-            }\r\n-            \r\n-            const result = await userService.signup({\r\n-                email,\r\n-                password\r\n-            });\r\n-            \r\n+            const { email, password } = req.body;\r\n+            const result = await userService.signup({ email, password });\r\n             res.status(201).json(result);\r\n         } catch (error) {\r\n             if (error instanceof AppError) {\r\n                 res.status(error.statusCode).json({ message: error.message });\r\n@@ -27,10 +19,10 @@\n     }\r\n \r\n     public async login(req: Request<{}, {}, ILoginRequest>, res: Response): Promise<void> {\r\n         try {\r\n-            const { email, password } = req.body;\r\n-            const result = await userService.login(email, password);\r\n+            const { email, password, remember } = req.body;\r\n+            const result = await userService.login(email, password, remember);\r\n             res.status(200).json(result);\r\n         } catch (error) {\r\n             if (error instanceof AppError) {\r\n                 res.status(error.statusCode).json({ message: error.message });\r\n@@ -44,8 +36,16 @@\n         try {\r\n             const { refreshToken } = req.body;\r\n             if (!refreshToken) {\r\n                 throw new AppError(400, 'Refresh token is required');\r\n+        }\r\n+    }\r\n+\r\n+    public async refreshToken(req: Request, res: Response): Promise<void> {\r\n+        try {\r\n+            const { refreshToken } = req.body;\r\n+            if (!refreshToken) {\r\n+                throw new AppError(400, 'Refresh token is required');\r\n             }\r\n             const result = await userService.refreshToken(refreshToken);\r\n             res.status(200).json(result);\r\n         } catch (error) {\r\n"
                },
                {
                    "date": 1741049680677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,16 +36,8 @@\n         try {\r\n             const { refreshToken } = req.body;\r\n             if (!refreshToken) {\r\n                 throw new AppError(400, 'Refresh token is required');\r\n-        }\r\n-    }\r\n-\r\n-    public async refreshToken(req: Request, res: Response): Promise<void> {\r\n-        try {\r\n-            const { refreshToken } = req.body;\r\n-            if (!refreshToken) {\r\n-                throw new AppError(400, 'Refresh token is required');\r\n             }\r\n             const result = await userService.refreshToken(refreshToken);\r\n             res.status(200).json(result);\r\n         } catch (error) {\r\n@@ -88,8 +80,16 @@\n     public async verifyEmail(req: Request, res: Response): Promise<void> {\r\n         try {\r\n             const { token } = req.params;\r\n             await userService.verifyEmail(token);\r\n+            });\r\n+        }\r\n+    }\r\n+\r\n+    public async verifyEmail(req: Request, res: Response): Promise<void> {\r\n+        try {\r\n+            const { token } = req.params;\r\n+            await userService.verifyEmail(token);\r\n             res.status(200).json({ \r\n                 message: 'Email verified successfully'\r\n             });\r\n         } catch (error: any) {\r\n"
                },
                {
                    "date": 1741049687337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n     }\r\n \r\n     public async googleLogin(req: Request<{}, {}, IGoogleAuthRequest>, res: Response): Promise<void> {\r\n         try {\r\n-            res.status(400).json({ \r\n+            const { idToken, googleId, email } = req.body;\r\n                 message: error.message || 'Logout failed'\r\n             });\r\n         }\r\n     }\r\n"
                }
            ],
            "date": 1741048387084,
            "name": "Commit-0",
            "content": "import { Request, Response } from 'express';\r\nimport { userService } from '../services/userService';\r\nimport { AppError } from '../types/errors';\r\nimport { IUserParams, ILoginRequest, ISignupRequest, IGoogleAuthRequest } from '../interfaces/userInterface';\r\n\r\nclass UserController {\r\n    public async signup(req: Request<{}, {}, ISignupRequest>, res: Response): Promise<void> {\r\n        try {\r\n            const { email, password, terms } = req.body;\r\n            if (!terms) {\r\n                throw new AppError(400, 'Terms must be accepted');\r\n            }\r\n            \r\n            const result = await userService.signup({\r\n                email,\r\n                password,\r\n                firstName: email.split('@')[0] // Default firstName from email\r\n            });\r\n            \r\n            res.status(201).json(result);\r\n        } catch (error) {\r\n            if (error instanceof AppError) {\r\n            const { email, password } = req.body;\r\n            const result = await userService.login(email, password);\r\n            res.status(200).json(result);\r\n        } catch (error) {\r\n            if (error instanceof AppError) {\r\n                res.status(error.statusCode).json({ message: error.message });\r\n            } else {\r\n                res.status(401).json({ message: 'Authentication failed' });\r\n            }\r\n        }\r\n    }\r\n\r\n    public async refreshToken(req: Request, res: Response): Promise<void> {\r\n        try {\r\n            const { refreshToken } = req.body;\r\n            if (!refreshToken) {\r\n                throw new AppError(400, 'Refresh token is required');\r\n            }\r\n            const result = await userService.refreshToken(refreshToken);\r\n            res.status(200).json(result);\r\n        } catch (error) {\r\n            if (error instanceof AppError) {\r\n                res.status(error.statusCode).json({ message: error.message });\r\n            } else {\r\n                res.status(401).json({ message: 'Token refresh failed' });\r\n            }\r\n        }\r\n    }\r\n\r\n    public async forgotPassword(req: Request, res: Response): Promise<void> {\r\n        try {\r\n            const { email } = req.body;\r\n            await userService.forgotPassword(email);\r\n            res.status(200).json({ \r\n                message: 'Password reset email sent'\r\n            });\r\n        } catch (error: any) {\r\n            res.status(400).json({ \r\n                message: error.message || 'Password reset request failed'\r\n            });\r\n        }\r\n    }\r\n\r\n    public async resetPassword(req: Request, res: Response): Promise<void> {\r\n        try {\r\n            const { token, newPassword } = req.body;\r\n            await userService.resetPassword(token, newPassword);\r\n            res.status(200).json({ \r\n                message: 'Password reset successful'\r\n            });\r\n        } catch (error: any) {\r\n            res.status(400).json({ \r\n                message: error.message || 'Password reset failed'\r\n            });\r\n        }\r\n    }\r\n\r\n    public async verifyEmail(req: Request, res: Response): Promise<void> {\r\n        try {\r\n            const { token } = req.params;\r\n            await userService.verifyEmail(token);\r\n            res.status(200).json({ \r\n                message: 'Email verified successfully'\r\n            });\r\n        } catch (error: any) {\r\n            res.status(400).json({ \r\n                message: error.message || 'Email verification failed'\r\n            });\r\n        }\r\n    }\r\n\r\n    public async logout(req: Request, res: Response): Promise<void> {\r\n        try {\r\n            const authHeader = req.headers.authorization;\r\n            if (!authHeader) {\r\n                throw new Error('No authorization token provided');\r\n            }\r\n            \r\n            await userService.logout(authHeader);\r\n            res.status(200).json({ \r\n                message: 'Logged out successfully'\r\n            });\r\n        } catch (error: any) {\r\n            res.status(400).json({ \r\n                message: error.message || 'Logout failed'\r\n            });\r\n        }\r\n    }\r\n\r\n    public async googleLogin(req: Request, res: Response): Promise<void> {\r\n        try {\r\n            const { idToken } = req.body;\r\n            const result = await userService.googleLogin(idToken);\r\n            res.status(200).json(result);\r\n        } catch (error: any) {\r\n            res.status(401).json({ \r\n                message: error.message || 'Google authentication failed'\r\n            });\r\n        }\r\n    }\r\n\r\n    public async getUserById(req: Request<IUserParams>, res: Response): Promise<void> {\r\n        try {\r\n            const id = Number(req.params.id);\r\n            if (isNaN(id)) {\r\n                throw new AppError(400, 'Invalid user ID');\r\n            }\r\n            const user = await userService.findUserById(id);\r\n            if (!user) {\r\n                throw new AppError(404, 'User not found');\r\n            }\r\n            res.status(200).json(user);\r\n        } catch (error) {\r\n            if (error instanceof AppError) {\r\n                res.status(error.statusCode).json({ message: error.message });\r\n            } else {\r\n                res.status(500).json({ message: 'Internal server error' });\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleError(error: unknown, res: Response, defaultMessage: string): void {\r\n        if (error instanceof AppError) {\r\n            res.status(error.statusCode).json({ message: error.message });\r\n        } else {\r\n            res.status(500).json({ message: defaultMessage });\r\n        }\r\n    }\r\n}\r\n\r\nexport default new UserController();"
        }
    ]
}