{
    "sourceFile": "src/lib/prisma.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1741088837903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741088867826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,16 @@\n-import { PrismaClient } from '@prisma/client';\r\n+import { PrismaClient } from '@prisma/client'\r\n \r\n-const prisma = new PrismaClient({\r\n-    log: ['query', 'error', 'warn'],\r\n-    datasources: {\r\n-        db: {\r\n-            url: process.env.DATABASE_URL\r\n-        }\r\n-    },\r\n-    // Add connection pooling configuration\r\n-    connection: {\r\n-        options: {\r\n-            pool: {\r\n-                min: 2,\r\n-                max: 5\r\n-            }\r\n-        }\r\n-    }\r\n-});\r\n+declare global {\r\n+    var prisma: PrismaClient | undefined\r\n+}\r\n \r\n-// Add query logging in development\r\n-if (process.env.NODE_ENV === 'development') {\r\n-    prisma.$on('query', (e: any) => {\r\n-        console.log('Query: ' + e.query);\r\n-        console.log('Duration: ' + e.duration + 'ms');\r\n-    });\r\n+const prisma = global.prisma || new PrismaClient({\r\n+    log: ['query', 'info', 'warn', 'error'],\r\n+})\r\n+\r\n+if (process.env.NODE_ENV !== 'production') {\r\n+    global.prisma = prisma\r\n }\r\n \r\n-export default prisma;\r\n+export default prisma\r\n \r\n"
                },
                {
                    "date": 1741088968363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,12 +5,21 @@\n }\r\n \r\n const prisma = global.prisma || new PrismaClient({\r\n     log: ['query', 'info', 'warn', 'error'],\r\n+    datasources: {\r\n+        db: {\r\n+            url: process.env.DATABASE_URL\r\n+        }\r\n+    }\r\n })\r\n \r\n if (process.env.NODE_ENV !== 'production') {\r\n     global.prisma = prisma\r\n+    prisma.$on('query', (e: any) => {\r\n+        console.log('Query:', e.query)\r\n+        console.log('Duration:', e.duration + 'ms')\r\n+    })\r\n }\r\n \r\n export default prisma\r\n \r\n"
                },
                {
                    "date": 1741089064676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { PrismaClient } from '@prisma/client'\r\n+import { PrismaClient, Prisma } from '@prisma/client'\r\n \r\n declare global {\r\n     var prisma: PrismaClient | undefined\r\n }\r\n"
                },
                {
                    "date": 1741089070266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,13 @@\n })\r\n \r\n if (process.env.NODE_ENV !== 'production') {\r\n     global.prisma = prisma\r\n-    prisma.$on('query', (e: any) => {\r\n+    \r\n+    // Properly typed query event listener\r\n+    prisma.$on<'query'>('query', (e: Prisma.QueryEvent) => {\r\n         console.log('Query:', e.query)\r\n+        console.log('Params:', e.params)\r\n         console.log('Duration:', e.duration + 'ms')\r\n     })\r\n }\r\n \r\n"
                },
                {
                    "date": 1741089236111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n declare global {\r\n     var prisma: PrismaClient | undefined\r\n }\r\n \r\n-const prisma = global.prisma || new PrismaClient({\r\n+// Define allowed event types\r\n     log: ['query', 'info', 'warn', 'error'],\r\n     datasources: {\r\n         db: {\r\n             url: process.env.DATABASE_URL\r\n"
                },
                {
                    "date": 1741089242746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,11 @@\n     var prisma: PrismaClient | undefined\r\n }\r\n \r\n // Define allowed event types\r\n+type PrismaEventType = 'query' | 'info' | 'warn' | 'error'\r\n+\r\n+const prisma = global.prisma || new PrismaClient({\r\n     log: ['query', 'info', 'warn', 'error'],\r\n     datasources: {\r\n         db: {\r\n             url: process.env.DATABASE_URL\r\n@@ -15,12 +18,9 @@\n \r\n if (process.env.NODE_ENV !== 'production') {\r\n     global.prisma = prisma\r\n     \r\n-    // Properly typed query event listener\r\n-    prisma.$on<'query'>('query', (e: Prisma.QueryEvent) => {\r\n-        console.log('Query:', e.query)\r\n-        console.log('Params:', e.params)\r\n+    // Use correct event typing\r\n         console.log('Duration:', e.duration + 'ms')\r\n     })\r\n }\r\n \r\n"
                },
                {
                    "date": 1741089248870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,14 @@\n if (process.env.NODE_ENV !== 'production') {\r\n     global.prisma = prisma\r\n     \r\n     // Use correct event typing\r\n+    prisma.$on('query' as PrismaEventType, (e: Prisma.QueryEvent) => {\r\n+        console.log('Query:', e.query)\r\n+        console.log('Parameters:', e.params)\r\n         console.log('Duration:', e.duration + 'ms')\r\n+        console.log('Timestamp:', new Date().toISOString())\r\n+        console.log('-------------------')\r\n     })\r\n }\r\n \r\n export default prisma\r\n"
                },
                {
                    "date": 1741089267862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,11 +3,8 @@\n declare global {\r\n     var prisma: PrismaClient | undefined\r\n }\r\n \r\n-// Define allowed event types\r\n-type PrismaEventType = 'query' | 'info' | 'warn' | 'error'\r\n-\r\n const prisma = global.prisma || new PrismaClient({\r\n     log: ['query', 'info', 'warn', 'error'],\r\n     datasources: {\r\n         db: {\r\n@@ -22,9 +19,9 @@\n     // Use correct event typing\r\n     prisma.$on('query' as PrismaEventType, (e: Prisma.QueryEvent) => {\r\n         console.log('Query:', e.query)\r\n         console.log('Parameters:', e.params)\r\n-        console.log('Duration:', e.duration + 'ms')\r\n+    prisma.$on('query', (e: Prisma.QueryEvent) => {\r\n         console.log('Timestamp:', new Date().toISOString())\r\n         console.log('-------------------')\r\n     })\r\n }\r\n"
                },
                {
                    "date": 1741089356514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,38 @@\n import { PrismaClient, Prisma } from '@prisma/client'\r\n \r\n+// Define event types that Prisma client can emit\r\n+type ExtendedPrismaClient = PrismaClient & {\r\n+    $on<T extends Prisma.LogLevel>(\r\n+        eventType: T,\r\n+        callback: (event: Prisma.LogEvent & { level: T }) => void\r\n+    ): void;\r\n+}\r\n+\r\n declare global {\r\n-    var prisma: PrismaClient | undefined\r\n+    var prisma: ExtendedPrismaClient | undefined\r\n }\r\n \r\n-const prisma = global.prisma || new PrismaClient({\r\n+const prisma = (global.prisma || new PrismaClient({\r\n     log: ['query', 'info', 'warn', 'error'],\r\n     datasources: {\r\n         db: {\r\n             url: process.env.DATABASE_URL\r\n         }\r\n     }\r\n-})\r\n+})) as ExtendedPrismaClient\r\n \r\n if (process.env.NODE_ENV !== 'production') {\r\n     global.prisma = prisma\r\n     \r\n-    // Use correct event typing\r\n-    prisma.$on('query' as PrismaEventType, (e: Prisma.QueryEvent) => {\r\n+    // Single event listener with combined logging\r\n+    prisma.$on('query', (e: Prisma.QueryEvent) => {\r\n+        console.log('----------------------------------------')\r\n+        console.log('Timestamp:', new Date().toISOString())\r\n         console.log('Query:', e.query)\r\n         console.log('Parameters:', e.params)\r\n-    prisma.$on('query', (e: Prisma.QueryEvent) => {\r\n-        console.log('Timestamp:', new Date().toISOString())\r\n-        console.log('-------------------')\r\n+        console.log('Duration:', e.duration + 'ms')\r\n+        console.log('----------------------------------------')\r\n     })\r\n }\r\n \r\n export default prisma\r\n"
                },
                {
                    "date": 1741089513000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,18 @@\n-import { PrismaClient, Prisma } from '@prisma/client'\r\n+import { PrismaClient, Prisma } from '@prisma/client';\r\n \r\n-// Define event types that Prisma client can emit\r\n-type ExtendedPrismaClient = PrismaClient & {\r\n-    $on<T extends Prisma.LogLevel>(\r\n-        eventType: T,\r\n-        callback: (event: Prisma.LogEvent & { level: T }) => void\r\n-    ): void;\r\n-}\r\n+type LogQueryEvent = Prisma.LogEvent & {\r\n+    query: string;\r\n+    params: string;\r\n+    duration: number;\r\n+    level: 'query';\r\n+};\r\n \r\n declare global {\r\n-    var prisma: ExtendedPrismaClient | undefined\r\n+    var prisma: PrismaClient | undefined;\r\n }\r\n \r\n+const prisma = global.prisma || new PrismaClient({\r\n const prisma = (global.prisma || new PrismaClient({\r\n     log: ['query', 'info', 'warn', 'error'],\r\n     datasources: {\r\n         db: {\r\n"
                },
                {
                    "date": 1741089518975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,28 +11,28 @@\n     var prisma: PrismaClient | undefined;\r\n }\r\n \r\n const prisma = global.prisma || new PrismaClient({\r\n-const prisma = (global.prisma || new PrismaClient({\r\n     log: ['query', 'info', 'warn', 'error'],\r\n     datasources: {\r\n         db: {\r\n             url: process.env.DATABASE_URL\r\n         }\r\n     }\r\n-})) as ExtendedPrismaClient\r\n+});\r\n \r\n if (process.env.NODE_ENV !== 'production') {\r\n-    global.prisma = prisma\r\n+    global.prisma = prisma;\r\n     \r\n-    // Single event listener with combined logging\r\n-    prisma.$on('query', (e: Prisma.QueryEvent) => {\r\n-        console.log('----------------------------------------')\r\n-        console.log('Timestamp:', new Date().toISOString())\r\n-        console.log('Query:', e.query)\r\n-        console.log('Parameters:', e.params)\r\n-        console.log('Duration:', e.duration + 'ms')\r\n-        console.log('----------------------------------------')\r\n+    prisma.$on('query', (event: LogQueryEvent) => {\r\n+        console.log('----------------------------------------');\r\n+        console.log('Timestamp:', new Date().toISOString());\r\n+        console.log('Query:', event.query);\r\n+        console.log('Parameters:', event.params);\r\n+        console.log('Duration:', event.duration + 'ms');\r\n+        console.log('----------------------------------------');\r\n+    });\r\n+}\r\n     })\r\n }\r\n \r\n export default prisma\r\n"
                },
                {
                    "date": 1741089885275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,39 @@\n import { PrismaClient, Prisma } from '@prisma/client';\r\n \r\n-type LogQueryEvent = Prisma.LogEvent & {\r\n+// Define custom event types\r\n+type QueryEvent = {\r\n+    timestamp: Date;\r\n     query: string;\r\n     params: string;\r\n     duration: number;\r\n-    level: 'query';\r\n+    target: string;\r\n };\r\n \r\n+// Extend PrismaClient for proper event typing\r\n+const prismaClientSingleton = () => {\r\n+    return new PrismaClient({\r\n+        log: [\r\n+            { emit: 'event', level: 'query' },\r\n+            { emit: 'event', level: 'info' },\r\n+            { emit: 'event', level: 'warn' },\r\n+            { emit: 'event', level: 'error' },\r\n+        ],\r\n+        datasources: {\r\n+            db: {\r\n+                url: process.env.DATABASE_URL\r\n+            }\r\n+        }\r\n+    });\r\n+};\r\n+\r\n declare global {\r\n-    var prisma: PrismaClient | undefined;\r\n+    var prisma: undefined | ReturnType<typeof prismaClientSingleton>;\r\n }\r\n \r\n-const prisma = global.prisma || new PrismaClient({\r\n-    log: ['query', 'info', 'warn', 'error'],\r\n-    datasources: {\r\n-        db: {\r\n-            url: process.env.DATABASE_URL\r\n-        }\r\n-    }\r\n-});\r\n+const prisma = global.prisma ?? prismaClientSingleton();\r\n \r\n if (process.env.NODE_ENV !== 'production') {\r\n     global.prisma = prisma;\r\n-    \r\n-    prisma.$on('query', (event: LogQueryEvent) => {\r\n-        console.log('----------------------------------------');\r\n-        console.log('Timestamp:', new Date().toISOString());\r\n-        console.log('Query:', event.query);\r\n-        console.log('Parameters:', event.params);\r\n-        console.log('Duration:', event.duration + 'ms');\r\n-        console.log('----------------------------------------');\r\n-    });\r\n-}\r\n-    })\r\n-}\r\n \r\n-export default prisma\r\n-\r\n+    prisma.$use(async (params, next) => {\r\n+        const start = Date.now();\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741089890631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,5 +35,25 @@\n if (process.env.NODE_ENV !== 'production') {\r\n     global.prisma = prisma;\r\n \r\n     prisma.$use(async (params, next) => {\r\n-        const start = Date.now();\n\\ No newline at end of file\n+        const start = Date.now();\r\n+        const result = await next(params);\r\n+        const end = Date.now();\r\n+        \r\n+        console.log(`Query ${params.model}.${params.action} took ${end - start}ms`);\r\n+        return result;\r\n+    });\r\n+\r\n+    // Properly typed event listener\r\n+    prisma.$on<any>('query' as never, (event: QueryEvent) => {\r\n+        console.log('----------------------------------------');\r\n+        console.log('Timestamp:', new Date().toISOString());\r\n+        console.log('Query:', event.query);\r\n+        console.log('Parameters:', event.params);\r\n+        console.log('Duration:', event.duration + 'ms');\r\n+        console.log('----------------------------------------');\r\n+    });\r\n+}\r\n+\r\n+export default prisma;\r\n+\r\n"
                },
                {
                    "date": 1741090106220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,14 +44,16 @@\n         return result;\r\n     });\r\n \r\n     // Properly typed event listener\r\n-    prisma.$on<any>('query' as never, (event: QueryEvent) => {\r\n+    prisma.$on<any>('query' as never, (event: QueryEvent | LogEvent) => {\r\n         console.log('----------------------------------------');\r\n         console.log('Timestamp:', new Date().toISOString());\r\n-        console.log('Query:', event.query);\r\n-        console.log('Parameters:', event.params);\r\n-        console.log('Duration:', event.duration + 'ms');\r\n+        if ('query' in event) {\r\n+            console.log('Query:', event.query);\r\n+            console.log('Parameters:', event.params);\r\n+            console.log('Duration:', event.duration + 'ms');\r\n+        }\r\n         console.log('----------------------------------------');\r\n     });\r\n }\r\n \r\n"
                },
                {
                    "date": 1741090132050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n         return result;\r\n     });\r\n \r\n     // Properly typed event listener\r\n-    prisma.$on<any>('query' as never, (event: QueryEvent | LogEvent) => {\r\n+    prisma.$on<any>('query' as never, (event: QueryEvent) => {\r\n         console.log('----------------------------------------');\r\n         console.log('Timestamp:', new Date().toISOString());\r\n         if ('query' in event) {\r\n             console.log('Query:', event.query);\r\n"
                },
                {
                    "date": 1741176459299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,6 @@\n import { PrismaClient, Prisma } from '@prisma/client';\r\n \r\n-// Define custom event types\r\n-type QueryEvent = {\r\n-    timestamp: Date;\r\n-    query: string;\r\n-    params: string;\r\n-    duration: number;\r\n-    target: string;\r\n-};\r\n-\r\n // Extend PrismaClient for proper event typing\r\n const prismaClientSingleton = () => {\r\n     return new PrismaClient({\r\n         log: [\r\n@@ -38,24 +29,34 @@\n     prisma.$use(async (params, next) => {\r\n         const start = Date.now();\r\n         const result = await next(params);\r\n         const end = Date.now();\r\n-        \r\n+\r\n         console.log(`Query ${params.model}.${params.action} took ${end - start}ms`);\r\n         return result;\r\n     });\r\n \r\n-    // Properly typed event listener\r\n-    prisma.$on<any>('query' as never, (event: QueryEvent) => {\r\n+    // Properly typed event listener for Prisma\r\n+    prisma.$on('query', (event: Prisma.QueryEvent) => {\r\n         console.log('----------------------------------------');\r\n         console.log('Timestamp:', new Date().toISOString());\r\n-        if ('query' in event) {\r\n-            console.log('Query:', event.query);\r\n-            console.log('Parameters:', event.params);\r\n-            console.log('Duration:', event.duration + 'ms');\r\n-        }\r\n+        console.log('Query:', event.query);\r\n+        console.log('Parameters:', event.params);\r\n+        console.log('Duration:', event.duration + 'ms');\r\n         console.log('----------------------------------------');\r\n     });\r\n+\r\n+    // Handle other log levels\r\n+    prisma.$on('info', (event: Prisma.LogEvent) => {\r\n+        console.log('[INFO]', event.message);\r\n+    });\r\n+\r\n+    prisma.$on('warn', (event: Prisma.LogEvent) => {\r\n+        console.warn('[WARN]', event.message);\r\n+    });\r\n+\r\n+    prisma.$on('error', (event: Prisma.LogEvent) => {\r\n+        console.error('[ERROR]', event.message);\r\n+    });\r\n }\r\n \r\n export default prisma;\r\n-\r\n"
                }
            ],
            "date": 1741088837903,
            "name": "Commit-0",
            "content": "import { PrismaClient } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient({\r\n    log: ['query', 'error', 'warn'],\r\n    datasources: {\r\n        db: {\r\n            url: process.env.DATABASE_URL\r\n        }\r\n    },\r\n    // Add connection pooling configuration\r\n    connection: {\r\n        options: {\r\n            pool: {\r\n                min: 2,\r\n                max: 5\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n// Add query logging in development\r\nif (process.env.NODE_ENV === 'development') {\r\n    prisma.$on('query', (e: any) => {\r\n        console.log('Query: ' + e.query);\r\n        console.log('Duration: ' + e.duration + 'ms');\r\n    });\r\n}\r\n\r\nexport default prisma;\r\n\r\n"
        }
    ]
}