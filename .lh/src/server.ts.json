{
    "sourceFile": "src/server.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1741087799396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741087805046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,46 +1,46 @@\n import express from 'express';\r\n import cors from 'cors';\r\n import cookieParser from 'cookie-parser';\r\n-\r\n-import app from './app';\r\n+import dotenv from 'dotenv';\r\n+import userRoutes from './routes/userRoutes';\r\n import prisma from './lib/prisma';\r\n \r\n+// Load environment variables\r\n+dotenv.config();\r\n+\r\n+const app = express();\r\n+\r\n+// CORS configuration\r\n+app.use(cors({\r\n+    origin: 'http://localhost:4200', // Your Angular frontend URL\r\n+    credentials: true,\r\n+    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\r\n+    allowedHeaders: ['Content-Type', 'Authorization'],\r\n+    exposedHeaders: ['set-cookie']\r\n+}));\r\n+\r\n+// Middleware\r\n+app.use(cookieParser());\r\n+app.use(express.json());\r\n+\r\n+// Routes\r\n+app.use('/api/users', userRoutes);\r\n+\r\n+// Error handling\r\n+app.use((err: Error, req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n+    console.error(err.stack);\r\n+    res.status(500).json({\r\n+        success: false,\r\n+        message: 'Internal server error'\r\n+    });\r\n+});\r\n+\r\n const PORT = process.env.PORT || 3000;\r\n \r\n async function startServer() {\r\n     try {\r\n         // Test database connection\r\n-        await prisma.$connect();\r\n-        console.log('Database Connected Successfully');\r\n-\r\n-        // Start server\r\n-        const server = app.listen(PORT, () => {\r\n-            console.log(`Server running on port ${PORT}`);\r\n-        });\r\n-\r\n-        // Graceful shutdown handlers\r\n-        const shutdown = async () => {\r\n-            console.log('Shutting down server...');\r\n-            await prisma.$disconnect();\r\n-            server.close(() => {\r\n-                console.log('Server closed');\r\n-                process.exit(0);\r\n-            });\r\n-        };\r\n-\r\n-        // Handle different shutdown signals\r\n-        process.on('SIGTERM', shutdown);\r\n-        process.on('SIGINT', shutdown);\r\n-        process.on('uncaughtException', async (error) => {\r\n-            console.error('Uncaught Exception:', error);\r\n-            await shutdown();\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error('Startup Error:', error);\r\n-        await prisma.$disconnect();\r\n-        process.exit(1);\r\n     }\r\n }\r\n \r\n startServer();\r\n"
                },
                {
                    "date": 1741088144300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,29 +3,22 @@\n import cookieParser from 'cookie-parser';\r\n import dotenv from 'dotenv';\r\n import userRoutes from './routes/userRoutes';\r\n import prisma from './lib/prisma';\r\n+import { serverConfig, corsOptions } from './config/config';\r\n \r\n // Load environment variables\r\n dotenv.config();\r\n \r\n const app = express();\r\n \r\n-// CORS configuration\r\n-app.use(cors({\r\n-    origin: 'http://localhost:4200', // Your Angular frontend URL\r\n-    credentials: true,\r\n-    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\r\n-    allowedHeaders: ['Content-Type', 'Authorization'],\r\n-    exposedHeaders: ['set-cookie']\r\n-}));\r\n-\r\n // Middleware\r\n+app.use(cors(corsOptions));\r\n app.use(cookieParser());\r\n app.use(express.json());\r\n \r\n // Routes\r\n-app.use('/api/users', userRoutes);\r\n+app.use(serverConfig.api_prefix + '/users', userRoutes);\r\n \r\n // Error handling\r\n app.use((err: Error, req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n     console.error(err.stack);\r\n@@ -34,14 +27,46 @@\n         message: 'Internal server error'\r\n     });\r\n });\r\n \r\n-const PORT = process.env.PORT || 3000;\r\n+const PORT = serverConfig.port;\r\n \r\n async function startServer() {\r\n     try {\r\n         // Test database connection\r\n+        await prisma.$connect();\r\n+        console.log('Database Connected Successfully');\r\n+\r\n+        // Start server\r\n+        const server = app.listen(PORT, () => {\r\n+            console.log(`Server running on port ${PORT}`);\r\n+        });\r\n+\r\n+        // Graceful shutdown handlers\r\n+        const shutdown = async () => {\r\n+            console.log('Shutting down server...');\r\n+            await prisma.$disconnect();\r\n+            server.close(() => {\r\n+                console.log('Server closed');\r\n+                process.exit(0);\r\n+            });\r\n+        };\r\n+\r\n+        // Handle different shutdown signals\r\n+        process.on('SIGTERM', shutdown);\r\n+        process.on('SIGINT', shutdown);\r\n+        process.on('uncaughtException', async (error) => {\r\n+            console.error('Uncaught Exception:', error);\r\n+            await shutdown();\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error('Startup Error:', error);\r\n+        await prisma.$disconnect();\r\n+        process.exit(1);\r\n     }\r\n }\r\n \r\n startServer();\r\n \r\n+export default app;\r\n+\r\n"
                },
                {
                    "date": 1741088991234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,27 +31,27 @@\n const PORT = serverConfig.port;\r\n \r\n async function startServer() {\r\n     try {\r\n-        // Test database connection\r\n         await prisma.$connect();\r\n         console.log('Database Connected Successfully');\r\n \r\n-        // Start server\r\n         const server = app.listen(PORT, () => {\r\n             console.log(`Server running on port ${PORT}`);\r\n         });\r\n \r\n-        // Graceful shutdown handlers\r\n         const shutdown = async () => {\r\n             console.log('Shutting down server...');\r\n             await prisma.$disconnect();\r\n             server.close(() => {\r\n-                console.log('Server closed');\r\n                 process.exit(0);\r\n             });\r\n         };\r\n \r\n+        process.on('SIGINT', shutdown);\r\n+            });\r\n+        };\r\n+\r\n         // Handle different shutdown signals\r\n         process.on('SIGTERM', shutdown);\r\n         process.on('SIGINT', shutdown);\r\n         process.on('uncaughtException', async (error) => {\r\n"
                },
                {
                    "date": 1741474682702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,10 @@\n     try {\r\n         await prisma.$connect();\r\n         console.log('Database Connected Successfully');\r\n \r\n-        const server = app.listen(PORT, () => {\r\n+        // Bind to 0.0.0.0 so the server is accessible on your network IP.\r\n+        const server = app.listen(PORT, '0.0.0.0', () => {\r\n             console.log(`Server running on port ${PORT}`);\r\n         });\r\n \r\n         const shutdown = async () => {\r\n@@ -47,18 +48,9 @@\n             });\r\n         };\r\n \r\n         process.on('SIGINT', shutdown);\r\n-            });\r\n-        };\r\n-\r\n-        // Handle different shutdown signals\r\n         process.on('SIGTERM', shutdown);\r\n-        process.on('SIGINT', shutdown);\r\n-        process.on('uncaughtException', async (error) => {\r\n-            console.error('Uncaught Exception:', error);\r\n-            await shutdown();\r\n-        });\r\n \r\n     } catch (error) {\r\n         console.error('Startup Error:', error);\r\n         await prisma.$disconnect();\r\n"
                },
                {
                    "date": 1741474778413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n         message: 'Internal server error'\r\n     });\r\n });\r\n \r\n-const PORT = serverConfig.port;\r\n+const PORT = Number(serverConfig.port);\r\n \r\n async function startServer() {\r\n     try {\r\n         await prisma.$connect();\r\n"
                }
            ],
            "date": 1741087799396,
            "name": "Commit-0",
            "content": "import express from 'express';\r\nimport cors from 'cors';\r\nimport cookieParser from 'cookie-parser';\r\n\r\nimport app from './app';\r\nimport prisma from './lib/prisma';\r\n\r\nconst PORT = process.env.PORT || 3000;\r\n\r\nasync function startServer() {\r\n    try {\r\n        // Test database connection\r\n        await prisma.$connect();\r\n        console.log('Database Connected Successfully');\r\n\r\n        // Start server\r\n        const server = app.listen(PORT, () => {\r\n            console.log(`Server running on port ${PORT}`);\r\n        });\r\n\r\n        // Graceful shutdown handlers\r\n        const shutdown = async () => {\r\n            console.log('Shutting down server...');\r\n            await prisma.$disconnect();\r\n            server.close(() => {\r\n                console.log('Server closed');\r\n                process.exit(0);\r\n            });\r\n        };\r\n\r\n        // Handle different shutdown signals\r\n        process.on('SIGTERM', shutdown);\r\n        process.on('SIGINT', shutdown);\r\n        process.on('uncaughtException', async (error) => {\r\n            console.error('Uncaught Exception:', error);\r\n            await shutdown();\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error('Startup Error:', error);\r\n        await prisma.$disconnect();\r\n        process.exit(1);\r\n    }\r\n}\r\n\r\nstartServer();\r\n\r\n"
        }
    ]
}